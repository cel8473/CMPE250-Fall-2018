


ARM Macro Assembler    Page 1 Program Title for Listing Header Goes Here


    1 00000000                 TTL              Program Title for Listing Heade
r Goes Here
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;Descriptive comment header goes here.
    4 00000000         ;(What does the program do?)
    5 00000000         ;Name:  <Your name here>
    6 00000000         ;Date:  <Date completed here>
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  <Your lab section, day, and time here>
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Template for KL46 Assembly with Keil C startup
   11 00000000         ;R. W. Melton
   12 00000000         ;November 13, 2017
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   16 00000000                 GBLL             MIXED_ASM_C
   17 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   19 00000000         ;*******************************************************
                       *********
   20 00000000         ;Include files
   21 00000000                 GET              MKL46Z4.s   ;Included by start.
                                                            s
   23 00000000         ;*******************************************************
                       *********
   24 00000000         ;EQUates
   25 00000000 0000004F 
                       MAX_STRING
                               EQU              79          ;Maximum number of 
                                                            string characters a
                                                            llowed
   26 00000000         ;-------------------------------------------------------
                       --------
   27 00000000         ;Characters
   28 00000000 0000000D 
                       CR      EQU              0x0D        ;ASCII value for ca
                                                            rriage return
   29 00000000 0000000A 
                       LF      EQU              0x0A        ;ASCII value for li
                                                            ne fill
   30 00000000 00000000 
                       NULL    EQU              0x00        ;ASCII value for NU
                                                            LL
   31 00000000 0000003E 
                       GT      EQU              0x3E        ;ASCII value for gr
                                                            eater than
   32 00000000 0000003C 
                       LT      EQU              0x3C        ;ASCII value for le
                                                            ss than
   33 00000000 00000008 
                       BS      EQU              0x08        ;ASCII value for ba
                                                            ckspace
   34 00000000         ;Record Structure for Queue
   35 00000000 00000000 



ARM Macro Assembler    Page 2 Program Title for Listing Header Goes Here


                       IN_PTR  EQU              0
   36 00000000 00000004 
                       OUT_PTR EQU              4
   37 00000000 00000008 
                       BUF_STRT
                               EQU              8
   38 00000000 0000000C 
                       BUF_PAST
                               EQU              12
   39 00000000 00000010 
                       BUF_SIZE
                               EQU              16
   40 00000000 00000011 
                       NUM_ENQD
                               EQU              17
   41 00000000         ;Queue structure sizes
   42 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4
   43 00000000 00000012 
                       Q_REC_SZ
                               EQU              18
   44 00000000 00000050 
                       TX_Q_SZ EQU              80
   45 00000000 00000050 
                       RX_Q_SZ EQU              80
   46 00000000         ;-------------------------------------------------------
                       --------
   47 00000000         ;NVIC_ICER
   48 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
   49 00000000         ;             read:   0 = unmasked;   1 = masked
   50 00000000         ;             write:  0 = no effect;  1 = mask
   51 00000000         ;12:UART0 IRQ mask
   52 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   53 00000000         ;-------------------------------------------------------
                       --------
   54 00000000         ;NVIC_ICPR
   55 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
   56 00000000         ;             read:   0 = not pending;  1 = pending
   57 00000000         ;             write:  0 = no effect;
   58 00000000         ;                     1 = change status to not pending
   59 00000000         ;12:UART0 IRQ pending status
   60 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
   61 00000000         ;-------------------------------------------------------
                       --------
   62 00000000         ;NVIC_IPR0-NVIC_IPR7
   63 00000000         ;2-bit priority:  00 = highest; 11 = lowest
   64 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   65 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   66 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3



ARM Macro Assembler    Page 3 Program Title for Listing Header Goes Here


                               EQU              (UART0_IRQ_PRIORITY << UART0_PR
I_POS)
   67 00000000         ;-------------------------------------------------------
                       --------
   68 00000000         ;NVIC_ISER
   69 00000000         ;31-00:SETENA=masks for HW IRQ sources;
   70 00000000         ;             read:   0 = masked;     1 = unmasked
   71 00000000         ;             write:  0 = no effect;  1 = unmask
   72 00000000         ;12:UART0 IRQ mask
   73 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   74 00000000         ;-------------------------------------------------------
                       --------
   75 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   76 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   77 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   78 00000000         ;-------------------------------------------------------
                       --------
   79 00000000         ;Port A
   81 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   83 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   84 00000000         ;-------------------------------------------------------
                       --------
   85 00000000         ;SIM_SCGC4
   86 00000000         ;1->10:UART0 clock gate control (enabled)
   87 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   88 00000000         ;-------------------------------------------------------
                       --------
   89 00000000         ;SIM_SCGC5
   90 00000000         ;1->09:Port A clock gate control (enabled)
   91 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
   92 00000000         ;-------------------------------------------------------
                       --------
   93 00000000         ;SIM_SOPT2
   94 00000000         ;01=27-26:UART0SRC=UART0 clock source select
   95 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/
                       2)
   96 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
   98 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
  100 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :
OR: SIM_SOPT2_PLLFLLSEL_MASK)
  101 00000000         ;-------------------------------------------------------
                       --------
  102 00000000         ;SIM_SOPT5
  103 00000000         ; 0->   16:UART0 open drain enable (disabled)
  104 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
  105 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
  109 00000000 00010007 



ARM Macro Assembler    Page 4 Program Title for Listing Header Goes Here


                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:  
                                SIM_SOPT5_UART0RXSRC_MASK :OR:               
                   SIM_SOPT5_UART0TXSRC_MASK)
  110 00000000         ;-------------------------------------------------------
                       --------
  111 00000000         ;UART0_BDH
  112 00000000         ;    0->  7:LIN break detect IE (disabled)
  113 00000000         ;    0->  6:RxD input active edge IE (disabled)
  114 00000000         ;    0->  5:Stop bit number select (1)
  115 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
  116 00000000         ;UART0CLK is MCGPLLCLK/2
  117 00000000         ;MCGPLLCLK is 96 MHz
  118 00000000         ;MCGPLLCLK/2 is 48 MHz
  119 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  120 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
  121 00000000         ;-------------------------------------------------------
                       --------
  122 00000000         ;UART0_BDL
  123 00000000         ;0x38->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  124 00000000         ;UART0CLK is MCGPLLCLK/2
  125 00000000         ;MCGPLLCLK is 96 MHz
  126 00000000         ;MCGPLLCLK/2 is 48 MHz
  127 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  128 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  129 00000000         ;-------------------------------------------------------
                       --------
  130 00000000         ;UART0_C1
  131 00000000         ;0-->7:LOOPS=loops select (normal)
  132 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  133 00000000         ;0-->5:RSRC=receiver source select (internal--no effect 
                       LOOPS=0)
  134 00000000         ;0-->4:M=9- or 8-bit mode select 
  135 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  136 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  137 00000000         ;0-->2:IDLE=idle line type select (idle begins after sta
                       rt bit)
  138 00000000         ;0-->1:PE=parity enable (disabled)
  139 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  140 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  141 00000000         ;-------------------------------------------------------
                       --------
  142 00000000         ;UART0_C2
  143 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  144 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  145 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  146 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  147 00000000         ;1-->3:TE=transmitter enable (enabled)
  148 00000000         ;1-->2:RE=receiver enable (enabled)
  149 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  150 00000000         ;0-->0:SBK=send break (disabled, normal)
  151 00000000 0000000C 
                       UART0_C2_T_R



ARM Macro Assembler    Page 5 Program Title for Listing Header Goes Here


                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2
_RE_MASK)
  152 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C
2_T_R)
  153 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C
2_T_RI)
  154 00000000         ;-------------------------------------------------------
                       --------
  155 00000000         ;UART0_C3
  156 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  157 00000000         ;           10th data bit for transmitter (not used M10=
                       0)
  158 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  159 00000000         ;           10th data bit for receiver (not used M10=0)
  160 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  161 00000000         ;            (no effect LOOPS=0)
  162 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  163 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  164 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  165 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  166 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  167 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  168 00000000         ;-------------------------------------------------------
                       --------
  169 00000000         ;UART0_C4
  170 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled
                       )
  171 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled
                       )
  172 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  173 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  174 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  175 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  176 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  177 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  178 00000000         ;-------------------------------------------------------
                       --------
  179 00000000         ;UART0_C5
  180 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  181 00000000         ;  0-->  6:Reserved; read-only; always 0
  182 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  183 00000000         ;000-->4-2:Reserved; read-only; always 0
  184 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only
                       )
  185 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
                       
  186 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00



ARM Macro Assembler    Page 6 Program Title for Listing Header Goes Here


  187 00000000         ;-------------------------------------------------------
                       --------
  188 00000000         ;UART0_S1
  189 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
                       
  190 00000000         ;0-->6:TC=transmission complete flag; read-only
  191 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  192 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  193 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear
                       )
  194 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  195 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  196 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  201 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              (UART0_S1_IDLE_MASK :OR:      
                        UART0_S1_OR_MASK :OR:                              UAR
T0_S1_NF_MASK :OR:                              UART0_S1_FE_MASK :OR:        
                      UART0_S1_PF_MASK)
  202 00000000         ;-------------------------------------------------------
                       --------
  203 00000000         ;UART0_S2
  204 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  205 00000000         ;             write 1 to clear
  206 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear
                       )
  207 00000000         ;              write 1 to clear
  208 00000000         ;0-->5:(reserved); read-only; always 0
  209 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  210 00000000         ;0-->3:RWUID=receive wake-up idle detect
  211 00000000         ;0-->2:BRK13=break character generation length (10)
  212 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  213 00000000         ;0-->0:RAF=receiver active flag; read-only
  215 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              (UART0_S2_LBKDIF_MASK :OR: UART
0_S2_RXEDGIF_MASK)
  216 00000000         ;-------------------------------------------------------
                       --------
  217 00000000         ;*******************************************************
                       *********
  218 00000000         ;MACROs
  219 00000000         ;*******************************************************
                       *********
  220 00000000         ;Program
  221 00000000         ;C source will contain main ()
  222 00000000         ;Only subroutines and ISRs in this assembly source
  223 00000000                 AREA             MyCode,CODE,READONLY
  224 00000000         
  225 00000000                 EXPORT           PUTCHAR
  226 00000000                 EXPORT           GETCHAR
  227 00000000                 EXPORT           UART0_IRQHandler
  228 00000000                 EXPORT           Init_UART0_IRQ
  229 00000000                 EXPORT           Init_ISR
  230 00000000         ;>>>>> begin subroutine code <<<<<
  231 00000000         ;-------------------------------------------------------
                       ----------   
  232 00000000         ;Subroutine Name: Init_UART0_IRQ
  233 00000000         ;Initialize the KL64 for interrupts and initializes the 



ARM Macro Assembler    Page 7 Program Title for Listing Header Goes Here


                       receive
  234 00000000         ;and transmit queues.
  235 00000000         ;Inputs: None
  236 00000000         ;Outputs: None
  237 00000000         ;Registers Changed: APSR
  238 00000000         ;Uses: Enqueue, Dequeue
  239 00000000         ;-------------------------------------------------------
                       ---------- 
  240 00000000         Init_UART0_IRQ
                               PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  241 00000000 B50F            PUSH             {R0-R3, LR} ;Push the contents 
                                                            of R0-R3 to the sta
                                                            ck
  242 00000002         ;Initialize TxQueue and RxQueue
  243 00000002 48B0            LDR              R0, =RxQueue
  244 00000004 49B0            LDR              R1, =RxRecord
  245 00000006 2250            MOVS             R2, #RX_Q_SZ
  246 00000008 F7FF FFFE       BL               InitQueue
  247 0000000C 48AF            LDR              R0, =TxQueue
  248 0000000E 49B0            LDR              R1, =TxRecord
  249 00000010 2250            MOVS             R2, #TX_Q_SZ
  250 00000012 F7FF FFFE       BL               InitQueue
  251 00000016         ; Select MCGPLLCLK / 2 as UART0 clock source
  252 00000016 49AF            LDR              R1,=SIM_SOPT2
  253 00000018 4AAF            LDR              R2,=SIM_SOPT2_UART0SRC_MASK
  254 0000001A 680B            LDR              R3,[R1,#0]
  255 0000001C 4393            BICS             R3,R3,R2
  256 0000001E 4AAF            LDR              R2,=SIM_SOPT2_UART0_MCGPLLCLK_D
IV2
  257 00000020 4313            ORRS             R3,R3,R2
  258 00000022 600B            STR              R3,[R1,#0]
  259 00000024         ; Enable external connection for UART0
  260 00000024 49AE            LDR              R1,=SIM_SOPT5
  261 00000026 4AAF            LDR              R2,= SIM_SOPT5_UART0_EXTERN_MAS
K_CLEAR
  262 00000028 680B            LDR              R3,[R1,#0]
  263 0000002A 4393            BICS             R3,R3,R2
  264 0000002C 600B            STR              R3,[R1,#0]
  265 0000002E         ; Enable clock for UART0 module
  266 0000002E 49AE            LDR              R1,=SIM_SCGC4
  267 00000030 4AAE            LDR              R2,= SIM_SCGC4_UART0_MASK
  268 00000032 680B            LDR              R3,[R1,#0]
  269 00000034 4313            ORRS             R3,R3,R2
  270 00000036 600B            STR              R3,[R1,#0]
  271 00000038         ; Enable clock for Port A module
  272 00000038 49AD            LDR              R1,=SIM_SCGC5
  273 0000003A 4AAE            LDR              R2,= SIM_SCGC5_PORTA_MASK
  274 0000003C 680B            LDR              R3,[R1,#0]
  275 0000003E 4313            ORRS             R3,R3,R2
  276 00000040 600B            STR              R3,[R1,#0]
  277 00000042         ; Connect PORT A Pin 1 (PTA1) to UART0 Rx (J1 Pin 02)
  278 00000042 49AD            LDR              R1,=PORTA_PCR1
  279 00000044 4AAD            LDR              R2,=PORT_PCR_SET_PTA1_UART0_RX
  280 00000046 600A            STR              R2,[R1,#0]
  281 00000048         ; Connect PORT A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)
  282 00000048 49AD            LDR              R1,=PORTA_PCR2
  283 0000004A 4AAC            LDR              R2,=PORT_PCR_SET_PTA2_UART0_TX



ARM Macro Assembler    Page 8 Program Title for Listing Header Goes Here


  284 0000004C 600A            STR              R2,[R1,#0]
  285 0000004E         ;Disable UART0 receiver and transmitter
  286 0000004E 49AD            LDR              R1,=UART0_BASE
  287 00000050 220C            MOVS             R2,#UART0_C2_T_R
  288 00000052 78CB            LDRB             R3,[R1,#UART0_C2_OFFSET]
  289 00000054 4393            BICS             R3,R3,R2
  290 00000056 70CB            STRB             R3,[R1,#UART0_C2_OFFSET]
  291 00000058         ;Initialize NVIC for UART0 interrupts
  292 00000058 48AB            LDR              R0, =UART0_IPR
  293 0000005A 49AC            LDR              R1, =NVIC_IPR_UART0_MASK
  294 0000005C 4AAB            LDR              R2, =NVIC_IPR_UART0_PRI_3
  295 0000005E 6803            LDR              R3, [R0, #0]
  296 00000060 438B            BICS             R3, R3, R1
  297 00000062 4313            ORRS             R3, R3, R2
  298 00000064 6003            STR              R3, [R0, #0]
  299 00000066         ;Clear any pending UART0 Interrupts
  300 00000066 48AA            LDR              R0, =NVIC_ICPR
  301 00000068 49AA            LDR              R1, =NVIC_ICPR_UART0_MASK
  302 0000006A 6001            STR              R1, [R0, #0]
  303 0000006C         ;Unmask UART0 interrupts
  304 0000006C 48AA            LDR              R0, =NVIC_ISER
  305 0000006E 49A9            LDR              R1, =NVIC_ISER_UART0_MASK
  306 00000070 6001            STR              R1, [R0, #0]
  307 00000072         ;Set UART0 for 9600 baud, 8N1 protocol
  308 00000072 49A4            LDR              R1, =UART0_BASE
  309 00000074 2201            MOVS             R2,#UART0_BDH_9600
  310 00000076 700A            STRB             R2,[R1,#UART0_BDH_OFFSET]
  311 00000078 2238            MOVS             R2,#UART0_BDL_9600
  312 0000007A 704A            STRB             R2,[R1,#UART0_BDL_OFFSET]
  313 0000007C 2200            MOVS             R2,#UART0_C1_8N1
  314 0000007E 708A            STRB             R2,[R1,#UART0_C1_OFFSET]
  315 00000080 2200            MOVS             R2,#UART0_C3_NO_TXINV
  316 00000082 718A            STRB             R2,[R1,#UART0_C3_OFFSET]
  317 00000084 220F            MOVS             R2,#UART0_C4_NO_MATCH_OSR_16
  318 00000086 728A            STRB             R2,[R1,#UART0_C4_OFFSET]
  319 00000088 2200            MOVS             R2,#UART0_C5_NO_DMA_SSR_SYNC
  320 0000008A 72CA            STRB             R2,[R1,#UART0_C5_OFFSET]
  321 0000008C 221F            MOVS             R2,#UART0_S1_CLEAR_FLAGS
  322 0000008E 710A            STRB             R2,[R1,#UART0_S1_OFFSET]
  324 00000090 22C0            MOVS             R2,       #UART0_S2_NO_RXINV_B
RK10_NO_LBKDETECT_CLEAR_FLAGS
  325 00000092 714A            STRB             R2,[R1,#UART0_S2_OFFSET]
  326 00000094         ; Enable UART0 receiver, transmitter and transmit interr
                       upts
  327 00000094 22AC            MOVS             R2,#UART0_C2_TI_RI
  328 00000096 70CA            STRB             R2,[R1,#UART0_C2_OFFSET]
  329 00000098 BD0F            POP              {R0-R3, PC} ;Restore the conten
                                                            ts of R1-R3
  330 0000009A 4770            BX               LR          ;Branch and exchang
                                                            e(Return)
  331 0000009C                 ENDP                         ;Ends the subroutin
                                                            e
  332 0000009C         
  333 0000009C         ;-------------------------------------------------------
                       ----------   
  334 0000009C         ;Subroutine Name: UART0_ISR
  335 0000009C         ;Initialize interrupt service routine for UART0
  336 0000009C         ;Inputs: None
  337 0000009C         ;Outputs: None



ARM Macro Assembler    Page 9 Program Title for Listing Header Goes Here


  338 0000009C         ;Registers Changed: APSR
  339 0000009C         ;Uses: Enqueue, Dequeue
  340 0000009C         ;-------------------------------------------------------
                       ----------
  341 0000009C         UART0_IRQHandler
  342 0000009C         UART0_ISR
                               PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  343 0000009C B672            CPSID            I           ;Mask other interru
                                                            pts
  344 0000009E B50F            PUSH             {R0-R3, LR} ;Push the contents 
                                                            of specified regist
                                                            ers to the stack
  345 000000A0         
  346 000000A0         ;Check if TxInterrupt(TIE) is enabled   
  347 000000A0 4898            LDR              R0, =UART0_BASE
  348 000000A2 78C1            LDRB             R1, [R0, #UART0_C2_OFFSET]
  349 000000A4 2280            MOVS             R2, #0x80
  350 000000A6 4011            ANDS             R1, R1, R2
  351 000000A8 2900            CMP              R1, #0
  352 000000AA D010            BEQ              CHECKRX
  353 000000AC E7FF            B                TXENABLED
  354 000000AE         
  355 000000AE         ;If TxInterrupt(TIE) check if TxInterrupt(TDRE) is enabl
                       ed
  356 000000AE 7901    TXENABLED
                               LDRB             R1,[R0,#UART0_S1_OFFSET]
  357 000000B0 2280            MOVS             R2, #0x80
  358 000000B2 4011            ANDS             R1, R1, R2
  359 000000B4 2900            CMP              R1, #0
  360 000000B6 D00A            BEQ              CHECKRX
  361 000000B8         ;If TxInterrupt(TDRE) is enabled  
  362 000000B8 4985            LDR              R1, =TxRecord
  363 000000BA 2250            MOVS             R2, #TX_Q_SZ
  364 000000BC F7FF FFFE       BL               Dequeue
  365 000000C0 D202            BCS              DISABLETX
  366 000000C2         
  367 000000C2         ;If dequeue succeeds write character to UART0 data regis
                       ter    
  368 000000C2 4990            LDR              R1, =UART0_BASE
  369 000000C4 71C8            STRB             R0, [R1, #UART0_D_OFFSET]
  370 000000C6         
  371 000000C6         ;End subroutine   
  372 000000C6 E00D            B                ENDISR
  373 000000C8         
  374 000000C8         ;Disable TxInterrupt if Dequeue fails   
  375 000000C8 212C    DISABLETX
                               MOVS             R1,#UART0_C2_T_RI
  376 000000CA 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  377 000000CC E00A            B                ENDISR
  378 000000CE         
  379 000000CE         ;Check if RxInterrupt is enabled  
  380 000000CE 488D    CHECKRX LDR              R0, =UART0_BASE
  381 000000D0 7901            LDRB             R1,[R0,#UART0_S1_OFFSET]
  382 000000D2 2210            MOVS             R2, #0x10
  383 000000D4 4011            ANDS             R1, R1, R2
  384 000000D6 2900            CMP              R1, #0
  385 000000D8 D004            BEQ              ENDISR



ARM Macro Assembler    Page 10 Program Title for Listing Header Goes Here


  386 000000DA         ;If RxInterrupt is enabled enqueue into RxQueue
  387 000000DA 79C3            LDRB             R3, [R0, #UART0_D_OFFSET]
  388 000000DC 497A            LDR              R1, =RxRecord
  389 000000DE 0018            MOVS             R0, R3
  390 000000E0 F7FF FFFE       BL               Enqueue
  391 000000E4         
  392 000000E4         ;Unmask interrupts and restore registers  
  393 000000E4 B662    ENDISR  CPSIE            I           ;Unmask other inter
                                                            rupts
  394 000000E6 BD0F            POP              {R0-R3, PC} ;Restore the conten
                                                            ts of the specified
                                                             register
  395 000000E8                 ENDP                         ;Ends the subroutin
                                                            e
  396 000000E8         
  397 000000E8         
  398 000000E8         ;-------------------------------------------------------
                       -----
  399 000000E8         ;Subroutine Name: NEWLINE
  400 000000E8         ;Moves the pointer to the next line
  401 000000E8         ;Inputs:None
  402 000000E8         ;Outputs:a carriage return and line fill to the commmand
                        line 
  403 000000E8         ;Registers Changed: R0
  404 000000E8         ;Uses:PUTCHAR
  405 000000E8         ;-------------------------------------------------------
                       ------
  406 000000E8         NEWLINE PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  407 000000E8 B501            PUSH             {R0,LR}     ;Push the contents 
                                                            of LR to the stack
  408 000000EA 200D            MOVS             R0, #CR     ;Store the ASCII fo
                                                            r a carriage return
                                                             in R0
  409 000000EC F7FF FFFE       BL               PUTCHAR     ;Perform a carriage
                                                             return
  410 000000F0 200A            MOVS             R0, #LF     ;Store the ASCII fo
                                                            r line fill in R0
  411 000000F2 F7FF FFFE       BL               PUTCHAR     ;Move the line poin
                                                            ter down a line
  412 000000F6 BD01            POP              {R0,PC}     ;Restore the conten
                                                            ts of the specified
                                                             register
  413 000000F8                 ENDP                         ;End the subroutine
                                                            
  414 000000F8         
  415 000000F8         ;-------------------------------------------------------
                       -----
  416 000000F8         ;Subroutine Name: SETC
  417 000000F8         ;Sets the C flag
  418 000000F8         ;Inputs:None
  419 000000F8         ;Outputs:APSR C(1)
  420 000000F8         ;Registers Changed: None
  421 000000F8         ;-------------------------------------------------------
                       ------ 
  422 000000F8         SETC    PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return  



ARM Macro Assembler    Page 11 Program Title for Listing Header Goes Here


                                                             
  423 000000F8 B403            PUSH             {R0-R1}     ;Push the contents 
                                                            of R0-R1 to the sta
                                                            ck
  424 000000FA F3EF 8300       MRS              R3, APSR    ;Transfers the cont
                                                            ents of APSR into R
                                                            3
  425 000000FE 2420            MOVS             R4, #0x20   ;Move 0x20 into R4
  426 00000100 0624            LSLS             R4, R4, #24 ;Logical Shift Left
                                                             contents in R4
  427 00000102 4323            ORRS             R3, R3, R4  ;Logical OR the con
                                                            tents in R3 and R4
  428 00000104 F383 8800       MSR              APSR, R3    ;Transfers the cont
                                                            ents of R3 into APS
                                                            R
  429 00000108 BC03            POP              {R0-R1}     ;Restore the conten
                                                            ts of the specified
                                                             register
  430 0000010A 4770            BX               LR          ;Branch and exchang
                                                            e(Return)
  431 0000010C                 ENDP                         ;End the subroutine
                                                            
  432 0000010C         ;-------------------------------------------------------
                       -----
  433 0000010C         ;Subroutine Name: CLEARC
  434 0000010C         ;Clears the C flag
  435 0000010C         ;Inputs:None
  436 0000010C         ;Outputs:APSR C(0)
  437 0000010C         ;Registers Changed: None
  438 0000010C         ;-------------------------------------------------------
                       ------ 
  439 0000010C         CLEARC  PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return  
                                                              
  440 0000010C B403            PUSH             {R0-R1}     ;Push the contents 
                                                            of R0-R1 to the sta
                                                            ck
  441 0000010E F3EF 8300       MRS              R3, APSR    ;Transers the conte
                                                            nts of APSR into R3
                                                            
  442 00000112 2420            MOVS             R4, #0x20   ;Move 0x20 into R4
  443 00000114 0624            LSLS             R4, R4, #24 ;Logical Shift Left
                                                             contents in R4
  444 00000116 43A3            BICS             R3, R3, R4  ;Logical and the co
                                                            ntets in R3 and R4
  445 00000118 F383 8800       MSR              APSR, R3    ;Transfers the cont
                                                            ents of R3 into APS
                                                            R
  446 0000011C BC03            POP              {R0-R1}     ;Restore the conten
                                                            ts of the specified
                                                             register
  447 0000011E 4770            BX               LR          ;Branch and exchang
                                                            e(Return) 
  448 00000120                 ENDP
  449 00000120         ;-------------------------------------------------------
                       -----
  450 00000120         ;Subroutine Name: PQUEUE
  451 00000120         ;Prints the characters enqueued in the list



ARM Macro Assembler    Page 12 Program Title for Listing Header Goes Here


  452 00000120         ;Inputs:
  453 00000120         ;Outputs:None 
  454 00000120         ;Registers Changed: APSR
  455 00000120         ;-------------------------------------------------------
                       ------
  456 00000120         PQUEUE  PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  457 00000120 B51F            PUSH             {R0-R4,LR}  ;Push the contents 
                                                            of specified regist
                                                            ers to the stack
  458 00000122 497E            LDR              R1, =QRECORD ;R1<--QRECORD
  459 00000124 7C4A            LDRB             R2, [R1, #NUM_ENQD] ;Counter
  460 00000126 684B            LDR              R3, [R1, #OUT_PTR] ;Address of 
                                                            out pointer
  461 00000128 68CC            LDR              R4, [R1, #BUF_PAST] ;Address pa
                                                            st the buffer
  462 0000012A 1E52    LOOPP   SUBS             R2, R2, #1  ;Subtract from num 
                                                            enqd 
  463 0000012C 2A00            CMP              R2, #0      ;Compare num enqd t
                                                            o zero
  464 0000012E DB0A            BLT              ENDLOOPP    ;Branch if less tha
                                                            n zero
  465 00000130 42A3            CMP              R3, R4      ;Compare OUT_PTR to
                                                             BUF_PAST
  466 00000132 DB00            BLT              OKAY        ;If OUT_PTR is less
                                                             than or equal to t
                                                            hen B OKAY
  467 00000134 688B            LDR              R3, [R1, #BUF_STRT] ;Change OUT
                                                            _PTR to BUF_STRT
  468 00000136 7818    OKAY    LDRB             R0, [R3, #0] ;Load element in q
                                                            ueue into R0
  469 00000138 F7FF FFFE       BL               PUTCHAR     ;Put the string on 
                                                            the terminal
  470 0000013C 2020            MOVS             R0, #0x20   ;Put a space on the
                                                             terminal
  471 0000013E F7FF FFFE       BL               PUTCHAR     ;Put a space after 
                                                            each element
  472 00000142 1C5B            ADDS             R3, R3, #1  ;Add to the outpoin
                                                            ter
  473 00000144 E7F1            B                LOOPP       ;Branch to LOOPP
  474 00000146 BD1F    ENDLOOPP
                               POP              {R0-R4,PC}  ;Restore the conten
                                                            ts of the specified
                                                             register
  475 00000148                 ENDP                         ;End the subroutine
                                                            
  476 00000148         ;-------------------------------------------------------
                       ----------
  477 00000148         ;Subroutine Name: GETCHAR
  478 00000148         ;Dequeues a character from the RxQueue queue.
  479 00000148         ;Inputs: None
  480 00000148         ;Outputs: R0: Character Dequeued
  481 00000148         ;Registers Changed: R0
  482 00000148         ;Uses: Dequeue 
  483 00000148         ;-------------------------------------------------------
                       ----------
  484 00000148         GETCHAR PROC             {R0-R14}    ;Specified register
                                                            s value will not ch



ARM Macro Assembler    Page 13 Program Title for Listing Header Goes Here


                                                            ange after return
  485 00000148 B502            PUSH             {R1, LR}    ;Push the contents 
                                                            of specified regist
                                                            ers to the stack
  486 0000014A 495F            LDR              R1, =RxRecord ;R1<--Address of 
                                                            RxQueue record stru
                                                            cture
  487 0000014C         
  488 0000014C B672    GETOP   CPSID            I           ;Mask other interru
                                                            pts
  489 0000014E F7FF FFFE       BL               Dequeue     ;Dequeue character 
                                                            at the top of the R
                                                            xQueue and store in
                                                             R0
  490 00000152 B662            CPSIE            I           ;Unmask other inter
                                                            rupts
  491 00000154 D2FA            BCS              GETOP       ;If Dequeue fails b
                                                            ranch to PUTOP
  492 00000156         
  493 00000156 BD02            POP              {R1, PC}    ;Restore the conten
                                                            ts of the specified
                                                             registers
  494 00000158                 ENDP                         ;Ends the subroutin
                                                            e
  495 00000158         
  496 00000158         ;-------------------------------------------------------
                       ----------
  497 00000158         ;Subroutine Name: PUTCHAR
  498 00000158         ;Initialize interrupt service routine for UART0
  499 00000158         ;Inputs: R0: Character to enqueue
  500 00000158         ;Outputs: None
  501 00000158         ;Registers Changed: APSR
  502 00000158         ;Uses: Enqueue
  503 00000158         ;-------------------------------------------------------
                       ----------
  504 00000158         PUTCHAR PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  505 00000158 B503            PUSH             {R0-R1, LR} ;Push the contents 
                                                            of specified regist
                                                            ers to the stack
  506 0000015A 495D            LDR              R1, =TxRecord ;R1<--Address of 
                                                            TxQueue record stru
                                                            cture
  507 0000015C         
  508 0000015C B672    PUTOP   CPSID            I           ;Mask other interru
                                                            pts
  509 0000015E F7FF FFFE       BL               Enqueue     ;Enqueue character 
                                                            in R0 into TxQueue
  510 00000162 B662            CPSIE            I           ;Unmask other inter
                                                            rupts
  511 00000164 D2FA            BCS              PUTOP       ;If enqueue fails b
                                                            ranch to PUTOP
  512 00000166         
  513 00000166         ;Enable TxInterrupt
  514 00000166 4867            LDR              R0, =UART0_BASE ;R0<--UART0 Bas
                                                            e Address 
  515 00000168 21AC            MOVS             R1, #UART0_C2_TI_RI 
                                                            ;R1<--Enable bits



ARM Macro Assembler    Page 14 Program Title for Listing Header Goes Here


  516 0000016A 70C1            STRB             R1, [R0, #UART0_C2_OFFSET] ;Ena
                                                            ble Transmit interr
                                                            upts`
  517 0000016C         
  518 0000016C BD03            POP              {R0-R1,PC}  ;Restore the conten
                                                            ts of the specified
                                                             register
  519 0000016E                 ENDP                         ;Ends the subroutin
                                                            e
  520 0000016E         
  521 0000016E         ;-------------------------------------------------------
                       ------------
  522 0000016E         ;Subroutine Name: GetStringSB
  523 0000016E         ;Reads a string from the terminal keyboard
  524 0000016E         ;Inputs: Memory address of the string
  525 0000016E         ;Outputs:
  526 0000016E         ;Register(s) Changed: APSR
  527 0000016E         ;Uses: GETCHAR subroutine
  528 0000016E         ;-------------------------------------------------------
                       ------------ 
  529 0000016E         GetStringSB
                               PROC             {R1-R13}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  530 0000016E B51E            PUSH             {R1-R4, LR} ;Store contents in 
                                                            the specified regis
                                                            ters in stack
  531 00000170         
  532 00000170 1E49            SUBS             R1, R1, #1  ;Subtract 1 from th
                                                            e buffer limit
  533 00000172 2300            MOVS             R3, #0      ;Initialize the str
                                                            ing pointer
  534 00000174 0002            MOVS             R2, R0      ;Creates a copy of 
                                                            the memory address 
                                                            of the string
  535 00000176         
  536 00000176 F7FF FFFE 
                       LOOPGET BL               GETCHAR     ;Get the character 
                                                            typed in the termin
                                                            al
  537 0000017A 280D            CMP              R0, #CR     ;Comapare character
                                                             in R0 to carriage 
                                                            return
  538 0000017C D011            BEQ              ENDLOOPGET  ;If R0 is a carriag
                                                            e return, endloop
  539 0000017E 2808            CMP              R0, #BS     ;Compare character 
                                                            in R0 to backspace
  540 00000180 D101            BNE              CONTINUE    ;If it is not equal
                                                             branch to CONTINUE
                                                            
  541 00000182 1E5B            SUBS             R3, R3, #1  ;Decrease the count
                                                            er
  542 00000184 E7F7            B                LOOPGET     ;Loop
  543 00000186 54D0    CONTINUE
                               STRB             R0, [R2,R3] ;Otherwise, Store t
                                                            he character in R0 
                                                            in R2's memory loca
                                                            tion
  544 00000188 F7FF FFFE       BL               PUTCHAR     ;Put the character 



ARM Macro Assembler    Page 15 Program Title for Listing Header Goes Here


                                                            entered on the term
                                                            inal
  545 0000018C 1C5B            ADDS             R3, R3, #1  ;Increment counter
  546 0000018E 428B            CMP              R3, R1      ;Compare buffer and
                                                             pointer
  547 00000190 D000            BEQ              JUSTPUT     ;If the buffer limi
                                                            t is the same as th
                                                            e pointer branch to
                                                             JUSTPUT
  548 00000192 E7F0            B                LOOPGET     ;Loop
  549 00000194 F7FF FFFE 
                       JUSTPUT BL               GETCHAR     ;Get the character 
                                                            typed in the termin
                                                            al
  550 00000198 280D            CMP              R0, #CR     ;Comapare character
                                                             in R0 to carriage 
                                                            return
  551 0000019A D002            BEQ              ENDLOOPGET  ;If R0 is a carriag
                                                            e return, endloop
  552 0000019C F7FF FFFE       BL               PUTCHAR     ;Put the character 
                                                            entered on the term
                                                            inal
  553 000001A0 E7F8            B                JUSTPUT     ;Branch to JUSTPUT
  554 000001A2 2400    ENDLOOPGET
                               MOVS             R4, #NULL   ;Store zero in R4
  555 000001A4 0010            MOVS             R0, R2      ;Restore R0 memory 
                                                            location
  556 000001A6 54C4            STRB             R4, [R0, R3] ;Store zero in the
                                                             final location of 
                                                            the string
  557 000001A8 BD1E            POP              {R1-R4, PC} ;Restore the conten
                                                            ts of specified reg
                                                            isters
  558 000001AA                 ENDP
  559 000001AA         ;-------------------------------------------------------
                       ------------
  560 000001AA         ;Subroutine Name: PutStringSB
  561 000001AA         ;Displays String stored in memory to the terminal screen
                       
  562 000001AA         ;Inputs: memory address of string(stored in R0)
  563 000001AA         ;Outputs:
  564 000001AA         ;Register(s) Changed: APSR
  565 000001AA         ;Uses: PUTCHAR subroutine
  566 000001AA         ;-------------------------------------------------------
                       -------------
  567 000001AA         PutStringSB
                               PROC             {R0-R14}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  568 000001AA B50F            PUSH             {R0-R3, LR} ;Store specified re
                                                            gisters on the stac
                                                            k
  569 000001AC         
  570 000001AC 2300            MOVS             R3, #0      ;Initialise the poi
                                                            nter
  571 000001AE 0002            MOVS             R2, R0      ;Copy memory addres
                                                            s stored in R0 into
                                                             R2
  572 000001B0         



ARM Macro Assembler    Page 16 Program Title for Listing Header Goes Here


  573 000001B0 5CD0    LOOPPUT LDRB             R0, [R2, R3] ;Load the contents
                                                             of the memory valu
                                                            e stored in R2 into
                                                             R0
  574 000001B2 1C5B            ADDS             R3, R3, #1  ;Increments the poi
                                                            nter
  575 000001B4 2800            CMP              R0, #NULL   ;Compare R0 to NULL
                                                            
  576 000001B6 D002            BEQ              ENDLOOPPUT  ;If R0 contains zer
                                                            o endloop
  577 000001B8 F7FF FFFE       BL               PUTCHAR     ;Call the PUTCHAR s
                                                            ubroutine
  578 000001BC E7F8            B                LOOPPUT     ;Branch to Loop
  579 000001BE BD0F    ENDLOOPPUT
                               POP              {R0-R3, PC} ;Restore the conten
                                                            ts of specified reg
                                                            isters
  580 000001C0                 ENDP
  581 000001C0         ;-------------------------------------------------------
                       ------------
  582 000001C0         ;Subroutine Name: PutNumU
  583 000001C0         ;Prints a text representation of a 
  584 000001C0         ;Inputs: Unsigned word value to print
  585 000001C0         ;Outputs:
  586 000001C0         ;Register(s) Changed: APSR
  587 000001C0         ;Uses: PUTCHAR Subroutine
  588 000001C0         ;-------------------------------------------------------
                       -------------
  589 000001C0         PutNumU PROC             {R0-R15}    ;Specified register
                                                            s value will not ch
                                                            ange after return
  590 000001C0 B51F            PUSH             {R0-R4, LR} ;Store registers sp
                                                            ecified on the stac
                                                            k
  591 000001C2         
  592 000001C2 0001            MOVS             R1, R0      ;Store the number i
                                                            n R1 for DIVU
  593 000001C4 485A            LDR              R0, =10     ;Store a digit plac
                                                            e in R0 as the Divi
                                                            sor
  594 000001C6         
  595 000001C6 0004    LOOPNUM MOVS             R4, R0      ;Create a copy of t
                                                            he number
  596 000001C8 F7FF FFFE       BL               DIVU        ;Divide the number 
                                                            by the digit place 
                                                            
  597 000001CC 3030            ADDS             R0, #0x30
  598 000001CE 1C00            ADDS             R0, R0, #NULL ;Add null termina
                                                            te to the quotient 
                                                            of the division
  599 000001D0 F7FF FFFE       BL               PUTCHAR     ;Put the quotient o
                                                            n the terminal
  600 000001D4 0008            MOVS             R0, R1      ;Move the value in 
                                                            
  601 000001D6 3030            ADDS             R0, #0x30   ;Add the value 0x30
                                                             into R0 so the app
                                                            ropriate number can
                                                             be displayed
  602 000001D8 1C00            ADDS             R0, R0, #NULL ;Add a null termi



ARM Macro Assembler    Page 17 Program Title for Listing Header Goes Here


                                                            nate to the end of 
                                                            the number in R0
  603 000001DA F7FF FFFE       BL               PUTCHAR     ;Put the number on 
                                                            the terminal
  604 000001DE BD1F            POP              {R0-R4, PC} ;Restore the conten
                                                            ts of specified reg
                                                            isters
  605 000001E0                 ENDP                         ;End Subroutine
  606 000001E0         ;-------------------------------------------------------
                       ------------
  607 000001E0         ;Subroutine Name: DIVU
  608 000001E0         ;Divides a dividend in R1 by divisor(R0) and stores
  609 000001E0         ;the quotient(R0) and remainder(R1)
  610 000001E0         ;Inputs:dividend and divisor
  611 000001E0         ;Outputs:quotient and remainder
  612 000001E0         ;Register(s) Changed: R0, R1
  613 000001E0         ;Uses: No subroutine
  614 000001E0         ;-------------------------------------------------------
                       -------------
  615 000001E0         DIVU    PROC             {R5-R14}    ;Do not use R5-R14
  616 000001E0 B41C            PUSH             {R2-R4}     ;Save contents of r
                                                            egisters R2-R4
  617 000001E2         
  618 000001E2 2800            CMP              R0, #0      ;Check if Divisor i
                                                            s 0
  619 000001E4 D013            BEQ              SETFLAG     ;If zero branch to 
                                                            SETFLAG
  620 000001E6 2900            CMP              R1, #0      ;Check if Dividend 
                                                            is 0
  621 000001E8 D007            BEQ              ZERO        ;If zero branch to 
                                                            ZERO
  622 000001EA         
  623 000001EA 2200            MOVS             R2, #0      ;Quotient = 0
  624 000001EC         
  625 000001EC 4281    WHILE   CMP              R1, R0      ;Compare Divdend an
                                                            d Divisor
  626 000001EE D302            BLO              ENDWHILE    ;If Divisor is less
                                                             than dividend  
  627 000001F0 1A09            SUBS             R1, R1, R0  ;Dividend = Dividen
                                                            d - Divisor
  628 000001F2 1C52            ADDS             R2, R2, #1  ;Quotient = Quotien
                                                            t + 1
  629 000001F4 E7FA            B                WHILE       ;Restart Loop
  630 000001F6 0010    ENDWHILE
                               MOVS             R0, R2      ;Remainder = Divide
                                                            nd
  631 000001F8 E001            B                CLEARFLAG   ;Branch to CLEARFLA
                                                            G
  632 000001FA         
  633 000001FA 2000    ZERO    MOVS             R0, #0      ;Set Remainder to 0
                                                            
  634 000001FC E7FF            B                CLEARFLAG   ;Branch to CLEARFLA
                                                            G
  635 000001FE         
  636 000001FE         ;Clears the C flash without changing other flags
  637 000001FE F3EF 8300 
                       CLEARFLAG
                               MRS              R3, APSR    ;Transers the conte
                                                            nts of APSR into R3



ARM Macro Assembler    Page 18 Program Title for Listing Header Goes Here


                                                            
  638 00000202 2420            MOVS             R4, #0x20   ;Move 0x20 into R4
  639 00000204 0624            LSLS             R4, R4, #24 ;Logical Shift Left
                                                             contents in R4
  640 00000206 43A3            BICS             R3, R3, R4  ;Logical and the co
                                                            ntets in R3 and R4
  641 00000208 F383 8800       MSR              APSR, R3    ;Transfers the cont
                                                            ents of R3 into APS
                                                            R
  642 0000020C E006            B                FINISH      ;Branch to FINISH
  643 0000020E         
  644 0000020E         ;Sets the C flag without changing other flags
  645 0000020E F3EF 8300 
                       SETFLAG MRS              R3, APSR    ;Transfers the cont
                                                            ents of APSR into R
                                                            3
  646 00000212 2420            MOVS             R4, #0x20   ;Move 0x20 into R4
  647 00000214 0624            LSLS             R4, R4, #24 ;Logical Shift Left
                                                             contents in R4
  648 00000216 4323            ORRS             R3, R3, R4  ;Logical OR the con
                                                            tents in R3 and R4
  649 00000218 F383 8800       MSR              APSR, R3    ;Transfers the cont
                                                            ents of R3 into APS
                                                            R
  650 0000021C         
  651 0000021C BC1C    FINISH  POP              {R2-R4}     ;Restore contents o
                                                            f registers R2-R4
  652 0000021E 4770            BX               LR          ;Branch and exchang
                                                            e
  653 00000220                 ENDP                         ;End subroutine
  654 00000220         
  655 00000220         ;-------------------------------------------------------
                       ------------
  656 00000220         ;Subroutine Name:InitQueue
  657 00000220         ;Initialises the Queue
  658 00000220         ;Inputs:R0:Contains the queue buffer
  659 00000220         ;  R1:Buffer record starting address
  660 00000220         ;  R2:Size of the buffer
  661 00000220         ;Outputs:None
  662 00000220         ;Register(s) Changed: APSR
  663 00000220         ;Uses:None
  664 00000220         ;-------------------------------------------------------
                       ------------ 
  665 00000220         InitQueue
                               PROC             {R0-R14}    ;Register values wo
                                                            uld be unchanged up
                                                            on return
  666 00000220 B407            PUSH             {R0-R2}     ;Store contents of 
                                                            Subroutine
  667 00000222 6008            STR              R0,[R1,#IN_PTR] ;IN_PTR<--Queue
                                                             buffer address
  668 00000224 6048            STR              R0,[R1,#OUT_PTR] ;OUT_PTR<--Que
                                                            ue buffer address
  669 00000226 6088            STR              R0,[R1,#BUF_STRT] ;BUF_STRT<--Q
                                                            ueue buffer address
                                                            
  670 00000228 1880            ADDS             R0,R0,R2    ;R0<--Queue buffer 
                                                            address + Buffer si
                                                            ze



ARM Macro Assembler    Page 19 Program Title for Listing Header Goes Here


  671 0000022A 60C8            STR              R0,[R1,#BUF_PAST] ;BUF_PAST<--Q
                                                            ueue buffer address
                                                             + Buffer size
  672 0000022C 740A            STRB             R2,[R1,#BUF_SIZE] ;BUF_SIZE<--B
                                                            uffer size
  673 0000022E 2000            MOVS             R0,#0       ;R0<--0
  674 00000230 7448            STRB             R0,[R1,#NUM_ENQD] ;NUM_ENQD<--0
                                                            
  675 00000232 BC07            POP              {R0-R2}     ;Restore contents o
                                                            f specified registe
                                                            rs
  676 00000234 4770            BX               LR          ;Branch and Exchang
                                                            e
  677 00000236                 ENDP                         ;End subroutine
  678 00000236         
  679 00000236         ;-------------------------------------------------------
                       ------------
  680 00000236         ;Subroutine Name:Enqueue
  681 00000236         ;Removes a specified character from the buffer 
  682 00000236         ;Inputs: R0: Character to Enqueue
  683 00000236         ;   R1: Address of queue record structure
  684 00000236         ;Outputs:PSR: C(1)- Failure or C(0) Success
  685 00000236         ;Register(s) Changed: APSR
  686 00000236         ;Uses: CLEARC, SETC
  687 00000236         ;-------------------------------------------------------
                       ------------ 
  688 00000236         Enqueue PROC             {R0-R14}    ;Registers value sh
                                                            ould not be changed
                                                             upon return from s
                                                            ubroutine
  689 00000236 B53F            PUSH             {R0-R5, LR} ;Store contents of 
                                                            specifed registers
  690 00000238         
  691 00000238 7C4A            LDRB             R2, [R1, #NUM_ENQD] ;R2<--Adres
                                                            s of number of elem
                                                            ents enqueued
  692 0000023A 7C0B            LDRB             R3, [R1, #BUF_SIZE] ;R3<--Gets 
                                                            the size of the buf
                                                            fer
  693 0000023C         
  694 0000023C 429A            CMP              R2, R3      ;Compare number of 
                                                            elements enqueue wi
                                                            th buffer size
  695 0000023E DA0D            BGE              FULL        ;If number of eleme
                                                            nts enqueued is gre
                                                            ater than the buffe
                                                            r then branch to fu
                                                            ll
  696 00000240         
  697 00000240 680B            LDR              R3, [R1, #IN_PTR] ;Load Input p
                                                            ointer into R3
  698 00000242 7018            STRB             R0, [R3, #0] ;Store the charact
                                                            er in R0 in the mem
                                                            ory address at R3 
  699 00000244         
  700 00000244 1C52            ADDS             R2, R2, #1  ;Increment number o
                                                            f elements enqueued
                                                            
  701 00000246 744A            STRB             R2, [R1, #NUM_ENQD] ;Store numb



ARM Macro Assembler    Page 20 Program Title for Listing Header Goes Here


                                                            er of elements enqu
                                                            eued
  702 00000248         
  703 00000248 1C5B            ADDS             R3, R3, #1  ;R4<--IN_PTR + 1
  704 0000024A 600B            STR              R3, [R1, #IN_PTR] ;IN_PTR + 1 -
                                                            ->QueueRecord
  705 0000024C         
  706 0000024C 68CC            LDR              R4, [R1, #BUF_PAST] 
                                                            ;R5<--BUFFER PAST
  707 0000024E 42A3            CMP              R3, R4      ;Compare IN_PTR to 
                                                            Buffer past
  708 00000250 DB01            BLT              NORESIZE    ;If IN_PTR is less 
                                                            than buffer size br
                                                            anch to NORESIZE
  709 00000252         
  710 00000252 688D            LDR              R5, [R1, #BUF_STRT] ;R5<--Buffe
                                                            r Start Address
  711 00000254 600D            STR              R5, [R1, #IN_PTR] ;IN_PTR<--Buf
                                                            fer Start  
  712 00000256         
  713 00000256 F7FF FFFE 
                       NORESIZE
                               BL               CLEARC      ;Clear C flag
  714 0000025A E001            B                DONE        ;Branch to Done
  715 0000025C         
  716 0000025C F7FF FFFE 
                       FULL    BL               SETC        ;Set C flag
  717 00000260 BD3F    DONE    POP              {R0-R5, PC} ;Restore contents o
                                                            f specified registe
                                                            r
  718 00000262                 ENDP                         ;End Subroutine
  719 00000262         
  720 00000262         ;-------------------------------------------------------
                       ------------
  721 00000262         ;Subroutine Name:Dequeue
  722 00000262         ;Removes a specified character from the buffer
  723 00000262         ;Inputs:R1: Address of queue record structure
  724 00000262         ;Outputs:R0: Character Dequeued
  725 00000262         ;   PSR: C(1)- Failure or C(0) Success
  726 00000262         ;Register(s) Changed: APSR
  727 00000262         ;Uses: None
  728 00000262         ;-------------------------------------------------------
                       ------------
  729 00000262         Dequeue PROC             {R0-R14}    ;Registers value sh
                                                            ould not be changed
                                                             upon return from s
                                                            ubroutine
  730 00000262 B53E            PUSH             {R1-R5, LR} ;Store contents of 
                                                            specifed registers
  731 00000264         
  732 00000264 7C4A            LDRB             R2, [R1, #NUM_ENQD] ;R2<--No. o
                                                            f elements enqueued
                                                            
  733 00000266 2A00            CMP              R2, #0      ;Compare number of 
                                                            elements and zero
  734 00000268 DD0D            BLE              EMPTY       ;If theres nothing 
                                                            to dequeue branch t
                                                            o EMPTY 
  735 0000026A         



ARM Macro Assembler    Page 21 Program Title for Listing Header Goes Here


  736 0000026A 684B            LDR              R3, [R1, #OUT_PTR] 
                                                            ;R3<--OUT_PTR
  737 0000026C 7818            LDRB             R0, [R3, #0] ;R0<--M[OUT_PTR]
  738 0000026E         
  739 0000026E 1E52            SUBS             R2, R2, #1  ;Decrement num of e
                                                            lements
  740 00000270 744A            STRB             R2, [R1, #NUM_ENQD] ;No of Elem
                                                            ents<--R2 
  741 00000272         
  742 00000272 1C5B            ADDS             R3, R3, #1  ;OUT_PTR + 1
  743 00000274 604B            STR              R3, [R1, #OUT_PTR] ;OUT_PTR<-- 
                                                            OUT_PTR + 1
  744 00000276         
  745 00000276 68CC            LDR              R4, [R1, #BUF_PAST] 
                                                            ;R4<--BUF_PAST
  746 00000278 42A3            CMP              R3, R4      ;Compare outpointer
                                                             to buffer past
  747 0000027A DB01            BLT              NORESIZE1   ;If outpointer is l
                                                            ess than buffer pas
                                                            t then branch to NO
                                                            RESIZE1
  748 0000027C         
  749 0000027C 688D            LDR              R5, [R1, #BUF_STRT] ;R5<--Buffe
                                                            r Start Address  
  750 0000027E 604D            STR              R5, [R1, #OUT_PTR] ;IN_PTR<--Bu
                                                            ffer Start
  751 00000280         
  752 00000280 F7FF FFFE 
                       NORESIZE1
                               BL               CLEARC      ;Clear C flag (Succ
                                                            ess)
  753 00000284 E001            B                DONE1       ;Branch to Done
  754 00000286         
  755 00000286 F7FF FFFE 
                       EMPTY   BL               SETC        ;Set C flag (Failed
                                                            )  
  756 0000028A BD3E    DONE1   POP              {R1-R5, PC} ;Restore contents o
                                                            f specified registe
                                                            r
  757 0000028C                 ENDP                         ;End Subroutine
  758 0000028C         
  759 0000028C         ;-------------------------------------------------------
                       ------------
  760 0000028C         ;Subroutine Name:PutNumHex
  761 0000028C         ;Prints to the terminal screen the text hexadecimal repr
                       esentation of the
  762 0000028C         ;unsigned word value in R0.
  763 0000028C         ;Inputs: R0:Hexadecimal number
  764 0000028C         ;Outputs:Hexadecimal number to terminal screen
  765 0000028C         ;Register(s) Changed: APSR
  766 0000028C         ;Uses: None
  767 0000028C         ;-------------------------------------------------------
                       ------------ 
  768 0000028C         PutNumHex
                               PROC             {R0-R14}    ;Registers value sh
                                                            ould not be changed
                                                             upon return from s
                                                            ubroutine
  769 0000028C B50F            PUSH             {R0-R3, LR} ;Store contents of 



ARM Macro Assembler    Page 22 Program Title for Listing Header Goes Here


                                                            specifed registers
  770 0000028E 2100            MOVS             R1, #0      ;Initialise Counter
                                                            
  771 00000290 4A28            LDR              R2, =0xF0000000 
                                                            ;Store mask in R2
  772 00000292 241C            MOVS             R4, #28     ;Store LSRS shift n
                                                            umber
  773 00000294 0003    LOOP    MOVS             R3, R0      ;Copy the hexadecim
                                                            al value
  774 00000296 2907            CMP              R1, #7      ;Compare counter to
                                                             7
  775 00000298 DC0C            BGT              ENDLOOP     ;If counter is 7 or
                                                             greater endloop
  776 0000029A 4010            ANDS             R0, R0, R2  ;AND mask with hexa
                                                            decimal number in R
                                                            0
  777 0000029C 40E0            LSRS             R0, R0, R4  ;Shift the number t
                                                            o the first byte
  778 0000029E 3030            ADDS             R0, R0, #0x30 ;add 0x30 to R0 t
                                                            o represent ASCII t
                                                            ext
  779 000002A0 2839            CMP              R0, #0x39   ;Comapare 0x30 + R0
                                                             to 0x39
  780 000002A2 DD00            BLE              NUMBER      ;If R0 is less than
                                                             0x39 then branch t
                                                            o NUMBER
  781 000002A4 1DC0            ADDS             R0, R0, #0x07 ;Add 0x07 to acco
                                                            unt for numbers
  782 000002A6 F7FF FFFE 
                       NUMBER  BL               PUTCHAR     ;Put the character 
                                                            on the terminal
  783 000002AA 0912            LSRS             R2, R2, #4  ;Shift out the firs
                                                            t bit in the origin
                                                            al hex in R0
  784 000002AC 0018            MOVS             R0, R3      ;Restore original h
                                                            ex value
  785 000002AE 1F24            SUBS             R4, R4, #4  ;Reduce LSRS shift 
                                                            number by a byte
  786 000002B0 1C49            ADDS             R1, R1, #1  ;Increment counter
  787 000002B2 E7EF            B                LOOP        ;Loop
  788 000002B4 BD0F    ENDLOOP POP              {R0-R3,PC}  ;Restore contents o
                                                            f specified registe
                                                            r
  789 000002B6                 ENDP                         ;End Subroutine
  790 000002B6         
  791 000002B6         ;-------------------------------------------------------
                       ------------
  792 000002B6         ;Subroutine Name:PutNumUB
  793 000002B6         ;Prints to the terminal screen the text decimal represen
                       tation of the
  794 000002B6         ;unsigned byte value in R0.
  795 000002B6         ;Inputs: R0:Unsigned Hex number
  796 000002B6         ;Outputs:Decimal number to terminal screen 
  797 000002B6         ;Register(s) Changed: APSR
  798 000002B6         ;Uses:PutNumU
  799 000002B6         ;-------------------------------------------------------
                       ------------     
  800 000002B6         PutNumUB
                               PROC             {R0-R14}    ;Registers value sh



ARM Macro Assembler    Page 23 Program Title for Listing Header Goes Here


                                                            ould not be changed
                                                             upon return from s
                                                            ubroutine 
  801 000002B6 B503            PUSH             {R0-R1,LR}  ;Store contents of 
                                                            specifed registers
  802 000002B8 21FF            MOVS             R1, #0xFF   ;Store mask
  803 000002BA 4008            ANDS             R0, R0, R1  ;AND Hex value in R
                                                            0 with mask
  804 000002BC F7FF FFFE       BL               PutNumU     ;Put the number on 
                                                            the terminal
  805 000002C0 BD03            POP              {R0-R1,PC}  ;Restore contents o
                                                            f specified registe
                                                            r
  806 000002C2                 ENDP                         ;End Subroutine
  807 000002C2         
  808 000002C2         ;>>>>>   end subroutine code <<<<<
  809 000002C2 00 00           ALIGN
  810 000002C4         ;*******************************************************
                       ***************
  811 000002C4         ;Constants
  812 000002C4 00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              40048038 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              0000000A 
              F0000000         AREA             MyConst,DATA,READONLY
  813 00000000         ;>>>>> begin constants here <<<<<
  814 00000000 54 79 70 
              65 20 61 
              20 71 75 
              65 75 65 
              20 63 6F 
              6D 6D 61 
              6E 64 20 
              28 44 2C 
              45 2C 48 



ARM Macro Assembler    Page 24 Program Title for Listing Header Goes Here


              2C 50 2C 
              53 29 3A 
              00       PROMPT  DCB              "Type a queue command (D,E,H,P,
S):" , NULL
  815 00000022 46 61 69 
              6C 75 72 
              65 3A 00 FAIL    DCB              "Failure:" , NULL
  816 0000002B 53 75 63 
              63 65 73 
              73 3A 00 SUC     DCB              "Success:", NULL
  817 00000034 43 68 61 
              72 61 63 
              74 65 72 
              20 74 6F 
              20 65 6E 
              71 75 65 
              75 65 3A 
              00       ENQ     DCB              "Character to enqueue:" , NULL
  818 0000004A 64 20 28 
              64 65 71 
              75 65 75 
              65 29 2C 
              20 65 20 
              28 65 6E 
              71 75 65 
              75 65 29 
              2C 20 68 
              20 28 68 
              65 6C 70 
              29 2C 20 
              70 20 28 
              70 72 69 
              6E 74 29 
              2C 20 73 
              20 28 73 
              74 61 74 
              75 73 29 
              00       HELP    DCB              "d (dequeue), e (enqueue), h (h
elp), p (print), s (status)", NULL
  819 00000084 53 74 61 
              74 75 73 
              3A 00    STAT    DCB              "Status:", NULL
  820 0000008C 20 20 49 
              6E 3D 30 
              78 00    IN      DCB              "  In=0x", NULL
  821 00000094 20 20 4F 
              75 74 3D 
              30 78 00 OUT     DCB              "  Out=0x", NULL
  822 0000009D 20 20 4E 
              75 6D 3D 
              00       NUM     DCB              "  Num=", NULL
  823 000000A4         ;>>>>>   end constants here <<<<<
  824 000000A4         ;*******************************************************
                       ***************
  825 000000A4         ;Variables
  826 000000A4                 AREA             MyData,DATA,READWRITE
  827 00000000         ;>>>>> begin variables here <<<<<
  828 00000000 00 00 00 
              00       QBUFFER SPACE            Q_BUF_SZ    ;Queue buffer size



ARM Macro Assembler    Page 25 Program Title for Listing Header Goes Here


  829 00000004                 ALIGN
  830 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 QRECORD SPACE            Q_REC_SZ    ;Queue record size
  831 00000016 00 00           ALIGN
  832 00000018 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQueue SPACE            RX_Q_SZ     ;Queue buffer size
  833 00000068                 ALIGN
  834 00000068 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxRecord
                               SPACE            Q_REC_SZ    ;Queue record size
  835 0000007A 00 00           ALIGN
  836 0000007C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 26 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQueue SPACE            TX_Q_SZ     ;Queue buffer size
  837 000000CC                 ALIGN
  838 000000CC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxRecord
                               SPACE            Q_REC_SZ    ;Queue record size
  839 000000DE 00 00           ALIGN
  840 000000E0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       STRING  SPACE            79          ;String Space
  841 0000012F         ;>>>>>   end variables here <<<<<
  842 0000012F                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\programtemplate_c_start.d -o.\objects\programtemplate_c
_start.o -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Inc
lude -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.14.0\Device\Include --predef
ine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="MKL46Z
256xxx4 SETA 1" --list=.\listings\programtemplate_c_start.lst ProgramTemplate_C
_Start.s
