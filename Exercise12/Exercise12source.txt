   TTL Ex Twelve
;****************************************************************
;Guessing game-.
;(Plays a random led guessing game)
;Name:  Vikram Singh Chris Larson
;Date:  12/4/2018
;Class:  CMPE-250
;Section:  Lab 1 11-12:50 Tuesday
;---------------------------------------------------------------
;Keil Template for KL46 Assembly with Keil C startup
;R. W. Melton
;November 13, 2017
;****************************************************************
;Assembler directives
            THUMB
            GBLL  MIXED_ASM_C
MIXED_ASM_C SETL  {TRUE}
            OPT   64  ;Turn on listing macro expansions
;****************************************************************
;Include files
            GET  MKL46Z4.s     ;Included by start.s
            OPT  1   ;Turn on listing
;****************************************************************
;EQUates
;NVIC_ICER
;31-00:CLRENA=masks for HW IRQ sources;
;             read:   0 = unmasked;   1 = masked
;             write:  0 = no effect;  1 = mask
;12:UART0 IRQ mask
NVIC_ICER_UART0_MASK  EQU  UART0_IRQ_MASK
;---------------------------------------------------------------
;NVIC_ICPR
;31-00:CLRPEND=pending status for HW IRQ sources;
;             read:   0 = not pending;  1 = pending
;             write:  0 = no effect;
;                     1 = change status to not pending
;12:UART0 IRQ pending status
NVIC_ICPR_UART0_MASK  EQU  UART0_IRQ_MASK
;---------------------------------------------------------------
;NVIC_IPR0-NVIC_IPR7
;2-bit priority:  00 = highest; 11 = lowest
UART0_IRQ_PRIORITY    EQU  3
NVIC_IPR_UART0_MASK   EQU (3 << UART0_PRI_POS)
NVIC_IPR_UART0_PRI_3  EQU (UART0_IRQ_PRIORITY << UART0_PRI_POS)
;---------------------------------------------------------------
;NVIC_ISER
;31-00:SETENA=masks for HW IRQ sources;
;             read:   0 = masked;     1 = unmasked
;             write:  0 = no effect;  1 = unmask
;12:UART0 IRQ mask
NVIC_ISER_UART0_MASK  EQU  UART0_IRQ_MASK
;---------------------------------------------------------------
;PORTx_PCRn (Port x pin control register n [for pin n])
;___->10-08:Pin mux control (select 0 to 8)
;Use provided PORT_PCR_MUX_SELECT_2_MASK
;---------------------------------------------------------------
;Port A
PORT_PCR_SET_PTA1_UART0_RX  EQU  (PORT_PCR_ISF_MASK :OR: \
                                  PORT_PCR_MUX_SELECT_2_MASK)
PORT_PCR_SET_PTA2_UART0_TX  EQU  (PORT_PCR_ISF_MASK :OR: \
                                  PORT_PCR_MUX_SELECT_2_MASK)
;---------------------------------------------------------------
;SIM_SCGC4
;1->10:UART0 clock gate control (enabled)
;Use provided SIM_SCGC4_UART0_MASK
;---------------------------------------------------------------
;SIM_SCGC5
;1->09:Port A clock gate control (enabled)
;Use provided SIM_SCGC5_PORTA_MASK
;---------------------------------------------------------------
;SIM_SOPT2
;01=27-26:UART0SRC=UART0 clock source select
;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/2)
; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
SIM_SOPT2_UART0SRC_MCGPLLCLK  EQU  \
                                 (1 << SIM_SOPT2_UART0SRC_SHIFT)
SIM_SOPT2_UART0_MCGPLLCLK_DIV2 EQU \
    (SIM_SOPT2_UART0SRC_MCGPLLCLK :OR: SIM_SOPT2_PLLFLLSEL_MASK)
;---------------------------------------------------------------
;SIM_SOPT5
; 0->   16:UART0 open drain enable (disabled)
; 0->   02:UART0 receive data select (UART0_RX)
;00->01-00:UART0 transmit data select source (UART0_TX)
SIM_SOPT5_UART0_EXTERN_MASK_CLEAR  EQU  \
                               (SIM_SOPT5_UART0ODE_MASK :OR: \
                                SIM_SOPT5_UART0RXSRC_MASK :OR: \
                                SIM_SOPT5_UART0TXSRC_MASK)
;---------------------------------------------------------------
;UART0_BDH
;    0->  7:LIN break detect IE (disabled)
;    0->  6:RxD input active edge IE (disabled)
;    0->  5:Stop bit number select (1)
;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
;UART0CLK is MCGPLLCLK/2
;MCGPLLCLK is 96 MHz
;MCGPLLCLK/2 is 48 MHz
;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
UART0_BDH_9600  EQU  0x01
;---------------------------------------------------------------
;UART0_BDL
;26->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
;UART0CLK is MCGPLLCLK/2
;MCGPLLCLK is 96 MHz
;MCGPLLCLK/2 is 48 MHz
;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
UART0_BDL_9600  EQU  0x38
;---------------------------------------------------------------
;UART0_C1
;0-->7:LOOPS=loops select (normal)
;0-->6:DOZEEN=doze enable (disabled)
;0-->5:RSRC=receiver source select (internal--no effect LOOPS=0)
;0-->4:M=9- or 8-bit mode select 
;        (1 start, 8 data [lsb first], 1 stop)
;0-->3:WAKE=receiver wakeup method select (idle)
;0-->2:IDLE=idle line type select (idle begins after start bit)
;0-->1:PE=parity enable (disabled)
;0-->0:PT=parity type (even parity--no effect PE=0)
UART0_C1_8N1  EQU  0x00
;---------------------------------------------------------------
;UART0_C2
;0-->7:TIE=transmit IE for TDRE (disabled)
;0-->6:TCIE=transmission complete IE for TC (disabled)
;0-->5:RIE=receiver IE for RDRF (disabled)
;0-->4:ILIE=idle line IE for IDLE (disabled)
;1-->3:TE=transmitter enable (enabled)
;1-->2:RE=receiver enable (enabled)
;0-->1:RWU=receiver wakeup control (normal)
;0-->0:SBK=send break (disabled, normal)
UART0_C2_T_R    EQU  (UART0_C2_TE_MASK :OR: UART0_C2_RE_MASK)
UART0_C2_T_RI   EQU  (UART0_C2_RIE_MASK :OR: UART0_C2_T_R)
UART0_C2_TI_RI  EQU  (UART0_C2_TIE_MASK :OR: UART0_C2_T_RI)
;---------------------------------------------------------------
;UART0_C3
;0-->7:R8T9=9th data bit for receiver (not used M=0)
;           10th data bit for transmitter (not used M10=0)
;0-->6:R9T8=9th data bit for transmitter (not used M=0)
;           10th data bit for receiver (not used M10=0)
;0-->5:TXDIR=UART_TX pin direction in single-wire mode
;            (no effect LOOPS=0)
;0-->4:TXINV=transmit data inversion (not inverted)
;0-->3:ORIE=overrun IE for OR (disabled)
;0-->2:NEIE=noise error IE for NF (disabled)
;0-->1:FEIE=framing error IE for FE (disabled)
;0-->0:PEIE=parity error IE for PF (disabled)
UART0_C3_NO_TXINV  EQU  0x00
;---------------------------------------------------------------
;UART0_C4
;    0-->  7:MAEN1=match address mode enable 1 (disabled)
;    0-->  6:MAEN2=match address mode enable 2 (disabled)
;    0-->  5:M10=10-bit mode select (not selected)
;01111-->4-0:OSR=over sampling ratio (16)
;               = 1 + OSR for 3 <= OSR <= 31
;               = 16 for 0 <= OSR <= 2 (invalid values)
UART0_C4_OSR_16           EQU  0x0F
UART0_C4_NO_MATCH_OSR_16  EQU  UART0_C4_OSR_16
;---------------------------------------------------------------
;UART0_C5
;  0-->  7:TDMAE=transmitter DMA enable (disabled)
;  0-->  6:Reserved; read-only; always 0
;  0-->  5:RDMAE=receiver full DMA enable (disabled)
;000-->4-2:Reserved; read-only; always 0
;  0-->  1:BOTHEDGE=both edge sampling (rising edge only)
;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
UART0_C5_NO_DMA_SSR_SYNC  EQU  0x00
;---------------------------------------------------------------
;UART0_S1
;0-->7:TDRE=transmit data register empty flag; read-only
;0-->6:TC=transmission complete flag; read-only
;0-->5:RDRF=receive data register full flag; read-only
;1-->4:IDLE=idle line flag; write 1 to clear (clear)
;1-->3:OR=receiver overrun flag; write 1 to clear (clear)
;1-->2:NF=noise flag; write 1 to clear (clear)
;1-->1:FE=framing error flag; write 1 to clear (clear)
;1-->0:PF=parity error flag; write 1 to clear (clear)
UART0_S1_CLEAR_FLAGS  EQU  0x1F
;---------------------------------------------------------------
;UART0_S2
;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
;             write 1 to clear
;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear)
;              write 1 to clear
;0-->5:(reserved); read-only; always 0
;0-->4:RXINV=receive data inversion (disabled)
;0-->3:RWUID=receive wake-up idle detect
;0-->2:BRK13=break character generation length (10)
;0-->1:LBKDE=LIN break detect enable (disabled)
;0-->0:RAF=receiver active flag; read-only
UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS  EQU  0xC0
;---------------------------------------------------------------
;---------------------------------------------------------------
;NVIC_ICER
;31-00:CLRENA=masks for HW IRQ sources;
;             read:   0 = unmasked;   1 = masked
;             write:  0 = no effect;  1 = mask
;22:PIT IRQ mask
;12:UART0 IRQ mask
NVIC_ICER_PIT_MASK    EQU  PIT_IRQ_MASK
;---------------------------------------------------------------
;NVIC_ICPR
;31-00:CLRPEND=pending status for HW IRQ sources;
;             read:   0 = not pending;  1 = pending
;             write:  0 = no effect;
;                     1 = change status to not pending
;22:PIT IRQ pending status
;12:UART0 IRQ pending status
NVIC_ICPR_PIT_MASK    EQU  PIT_IRQ_MASK
;---------------------------------------------------------------
;NVIC_IPR0-NVIC_IPR7
;2-bit priority:  00 = highest; 11 = lowest
;--PIT
PIT_IRQ_PRIORITY    EQU  0
NVIC_IPR_PIT_MASK   EQU  (3 << PIT_PRI_POS)
NVIC_IPR_PIT_PRI_0  EQU  (PIT_IRQ_PRIORITY << UART0_PRI_POS)
;--UART0
;---------------------------------------------------------------
;NVIC_ISER
;31-00:SETENA=masks for HW IRQ sources;
;             read:   0 = masked;     1 = unmasked
;             write:  0 = no effect;  1 = unmask
;22:PIT IRQ mask
;12:UART0 IRQ mask
NVIC_ISER_PIT_MASK    EQU  PIT_IRQ_MASK
;---------------------------------------------------------------
;PIT_LDVALn:  PIT load value register n
;31-00:TSV=timer start value (period in clock cycles - 1)
;Clock ticks for 0.01 s at 24 MHz count rate
;0.01 s * 24,000,000 Hz = 240,000
;TSV = 240,000 - 1
PIT_LDVAL_10ms  EQU  239999
;---------------------------------------------------------------
;PIT_MCR:  PIT module control register
;1-->    0:FRZ=freeze (continue'/stop in debug mode)
;0-->    1:MDIS=module disable (PIT section)
;               RTI timer not affected
;               must be enabled before any other PIT setup
PIT_MCR_EN_FRZ  EQU  PIT_MCR_FRZ_MASK
;---------------------------------------------------------------
;PIT_TCTRLn:  PIT timer control register n
;0-->   2:CHN=chain mode (enable)
;1-->   1:TIE=timer interrupt enable
;1-->   0:TEN=timer enable
PIT_TCTRL_CH_IE  EQU  (PIT_TCTRL_TEN_MASK :OR: PIT_TCTRL_TIE_MASK)
;---------------------------------------------------------------
;****************************************************************
Q_BUF_SZ				EQU			4
Q_REC_SZ                EQU 		18
MAX_STRING 				EQU 		79
IN						EQU 		0
OUT						EQU 		4
START					EQU 		8
PAST					EQU 		12
SIZE					EQU		 	16
NUM						EQU 		17
CR          			EQU 		0x0D
LF          			EQU 		0x0A
NULL       			    EQU 		0x00
SHIFT					EQU			24	
ALPHA					EQU			55		
NUM_C					EQU			48	
PWM_PERIOD_20ms 		EQU 		60000
PWM_DUTY_5 				EQU			3000
PWM_DUTY_10				EQU 		6000
DAC0_STEPS				EQU 		4096
SERVO_POSITIONS			EQU			5
NONE					EQU			0
GREEN					EQU			1
RED						EQU			2
BOTH					EQU			3
MAX_TIME				EQU			110
ONE_SEC					EQU			10
POS_RED         		EQU  		29
POS_GREEN       		EQU  		5
LED_RED_MASK    		EQU  		(1 << POS_RED)
LED_GREEN_MASK  		EQU  		(1 << POS_GREEN)
LED_PORTD_MASK  		EQU  		LED_GREEN_MASK
LED_PORTE_MASK  		EQU  		LED_RED_MASK
;Port D
PTD5_MUX_GPIO  EQU  (1 << PORT_PCR_MUX_SHIFT)
SET_PTD5_GPIO  EQU  (PORT_PCR_ISF_MASK :OR: PTD5_MUX_GPIO)
;Port E
PTE29_MUX_GPIO  EQU  (1 << PORT_PCR_MUX_SHIFT)
SET_PTE29_GPIO  EQU  (PORT_PCR_ISF_MASK :OR: PTE29_MUX_GPIO)
;****************************************************************
;MACROs
;****************************************************************
;Program
;C source will contain main ()
;Only subroutines and ISRs in this assembly source
            AREA    MyCode,CODE,READONLY
					EXPORT PutStringSB
					EXPORT GetChar
					EXPORT PutChar
					EXPORT PutNumU
					EXPORT NewLine
                    EXPORT Init_UART0_IRQ
                    EXPORT Init_PIT_IRQ
					EXPORT UART0_IRQHandler
					EXPORT PIT_IRQHandler
					EXPORT Init_LED
					EXPORT NewLine
					EXPORT Turn_G
					EXPORT Turn_R
					EXPORT Turn_B
					EXPORT Turn_OFF
					EXPORT StartStopWatch
					EXPORT KeyPressed
					EXPORT getCount
;>>>>> begin subroutine code <<<<<
;---------------------------------------
;Return the count value of the stopwatch
getCount		PROC	{R0-R13}
				PUSH  	{R1}
				LDR 	R1,=Count
				LDR   	R1,[R1,#0]
				MOVS  	R0,R1
				POP   	{R1}
				BX    	LR
				ENDP
;----------------------------------------
;Determines if a key is pressed returns a number other than 0 if it has
KeyPressed		PROC	{R0-R13}
				LDR		R0,=RxQRec
				LDRB	R0,[R0,#NUM]
				BX		LR
				ENDP
;-----------------------------------------
;Starts the stop watch.
StartStopWatch	PROC	{R0-R13}
				PUSH 	{R0-R1}
				LDR 	R0,=Count
				MOVS 	R1,#0
				STR 	R1,[R0,#0]
				LDR 	R0,=RunStopWatch
				MOVS 	R1,#1
				STRB 	R1,[R0,#0]
				POP 	{R0-R1}
				BX 		LR
				ENDP
;------------------------------------------
;Initializes the leds
Init_LED		PROC	{R0-R13}
				PUSH	{R0-R2,LR}
				LDR     R0,=SIM_SCGC5
				LDR  	R1,=(SIM_SCGC5_PORTD_MASK :OR: SIM_SCGC5_PORTE_MASK)
				LDR     R2,[R0,#0]
				ORRS    R2,R2,R1
				STR     R2,[R0,#0]
				;Select PORT E Pin 29 for GPIO to red LED
				LDR     R0,=PORTE_BASE
				LDR     R1,=SET_PTE29_GPIO
				STR     R1,[R0,#PORTE_PCR29_OFFSET]
				;Select PORT D Pin 5 for GPIO to green LED
				LDR     R0,=PORTD_BASE
				LDR     R1,=SET_PTD5_GPIO
				STR     R1,[R0,#PORTD_PCR5_OFFSET]
				LDR  	R0,=FGPIOD_BASE
				LDR  	R1,=LED_PORTD_MASK
				STR  	R1,[R0,#GPIO_PDDR_OFFSET]
				LDR  	R0,=FGPIOE_BASE
				LDR  	R1,=LED_PORTE_MASK
				STR  	R1,[R0,#GPIO_PDDR_OFFSET]
				POP		{R0-R2,PC}
				ENDP
;---------------------------------------------------
;Turn on green and trun off red
Turn_G			PROC	{R0-R13}
				PUSH	{R0-R1,LR}
				;Turn off red LED
				LDR  	R0,=FGPIOE_BASE
				LDR  	R1,=LED_RED_MASK
				STR  	R1,[R0,#GPIO_PSOR_OFFSET]
				;Turn on green LED
				LDR  	R0,=FGPIOD_BASE
				LDR  	R1,=LED_GREEN_MASK
				STR  	R1,[R0,#GPIO_PCOR_OFFSET]
				POP		{R0-R1,PC}
				ENDP
;---------------------------------------------------
;turn on red and turn off green
Turn_R			PROC	{R0-R13}
				PUSH	{R0-R1,LR}
				;Turn on red LED
				LDR  	R0,=FGPIOE_BASE
				LDR  	R1,=LED_RED_MASK
				STR  	R1,[R0,#GPIO_PCOR_OFFSET]
				;Turn off green LED
				LDR  	R0,=FGPIOD_BASE
				LDR  	R1,=LED_GREEN_MASK
				STR  	R1,[R0,#GPIO_PSOR_OFFSET]
				POP		{R0-R1,PC}
				ENDP
;---------------------------------------------------
;Turn on both leds
Turn_B			PROC	{R0-R13}
				PUSH	{R0-R1,LR}
				;Turn on green LED
				LDR  	R0,=FGPIOD_BASE
				LDR  	R1,=LED_GREEN_MASK
				STR  	R1,[R0,#GPIO_PCOR_OFFSET]
				;Turn on red LED
				LDR  	R0,=FGPIOE_BASE
				LDR  	R1,=LED_RED_MASK
				STR  	R1,[R0,#GPIO_PCOR_OFFSET]
				POP		{R0-R1,PC}
				ENDP
;---------------------------------------------------
;Turn off both leds
Turn_OFF		PROC	{R0-R13}
				PUSH	{R0-R1,LR}
				;Turn off green LED
				LDR  	R0,=FGPIOD_BASE
				LDR  	R1,=LED_GREEN_MASK
				STR  	R1,[R0,#GPIO_PSOR_OFFSET]
				;Turn off red LED
				LDR  	R0,=FGPIOE_BASE
				LDR  	R1,=LED_RED_MASK
				STR  	R1,[R0,#GPIO_PSOR_OFFSET]
				POP		{R0-R1,PC}
				ENDP
;---------------------------------------------------
;This subroutine incrments the RunStopWatch if it is not zero,
;If it is 0 then the Count is unchanged
PIT_IRQHandler	
PIT_ISR         PROC	{R0-R13}
				LDR 	R0,=RunStopWatch
				LDRB 	R0,[R0,#0]
				CMP 	R0, #0
				BNE 	Add_Count		;Checks to see if count is 0, if it is not increment, if it is FinPIT
				B 		FinPIT				
Add_Count		LDR 	R0,=Count	
				LDR 	R1,[R0,#0]
				ADDS 	R1,R1,#1
				STR 	R1,[R0,#0]
FinPIT			LDR 	R0,=PIT_CH0_BASE
				LDR 	R1,=PIT_TFLG_TIF_MASK
				STR 	R1,[R0,#PIT_TFLG_OFFSET]
                BX      LR
				ENDP
;------------------------------------------------------
InitQueue		PROC	{R0-R13}
				STR		R0,[R1,#IN]				;Store the in pointer address in R1
				STR		R0,[R1,#OUT]			;Stroe out pointer in the r1, 
				STR		R0,[R1,#START]			;Store buffer starting point in r1
				STRB	R2,[R1,#SIZE]			;store size in r1
				ADDS	R0,R0,R2				;add max capacity of queue to address
				STR		R0,[R1,#PAST]			;store buffer past in r1
				MOVS	R2,#NULL				;store 0 for numbrs in q
				STRB	R2,[R1,#NUM]
				BX		LR
				ENDP
;---------------------------------------------------------------------
GetChar			PROC	{R0-R14}
				PUSH	{R1,R2,LR}
				LDR		R1,=RxQRec
GetCharLoop		CPSID	I
				BL		Dequeue
				CPSIE	I
				BCS		GetCharLoop
				POP		{R1-R2,PC}
				ENDP
;-------------------------------------------
PutChar			PROC	{R0-R14}
				PUSH	{R0-R1,LR}
PutCharLoop		LDR		R1,=TxQRec
				CPSID	I
				BL		Enqueue
				CPSIE	I
				BCS		PutCharLoop
				LDR		R0,=UART0_BASE
				MOVS	R1,#UART0_C2_TI_RI
				STRB	R1,[R0,#UART0_C2_OFFSET]
				POP		{R0-R1,PC}
				ENDP
;------------------------------------------
UART0_IRQHandler
UART0_ISR       PROC	{R0-R14}
				CPSID 	I						;MaskInterupt
				PUSH 	{LR, R0-R3}
				LDR 	R0,=UART0_BASE		;Ldr Uart0 base into ro
				LDRB 	R1,[R0,#UART0_C2_OFFSET];Bit seven is set if Intereupt
				MOVS 	R2,#0x80	
				ANDS 	R1,R1,R2
				CMP 	R1, #0
				BNE 	TX_ON
				B 		CHECK_INT		;CHeck RX if no interupt			
TX_ON			LDRB 	R1,[R0,#UART0_S1_OFFSET]
				MOVS 	R2,#0x80
				ANDS 	R1,R1,R2
				CMP 	R1,#0
				BEQ 	CHECK_INT
				LDR 	R1,=TxQRec	;Dequeue 
				MOVS 	R2,#Q_BUF_SZ		;Load into queue
				BL 		Dequeue
				BCS 	TXOFF				;did not work
				LDR 	R1,=UART0_BASE		;did work
				STRB 	R0,[R1, #UART0_D_OFFSET]	;transmit character
				B 		FinISR
TXOFF			MOVS 	R1,#UART0_C2_T_RI
				STRB 	R1,[R0,#UART0_C2_OFFSET]
				B 		FinISR
CHECK_INT		LDR 	R0,=UART0_BASE		;Check if interupt exeist
				LDRB 	R1,[R0,#UART0_S1_OFFSET]
				MOVS 	R2,#0x10
				ANDS 	R1,R1,R2
				CMP 	R1,#0
				BEQ 	FinISR
				LDR 	R0,=UART0_BASE
				LDRB 	R3,[R0,#UART0_D_OFFSET]
				LDR 	R1,=RxQRec
				MOVS 	R0,R3
				BL 		Enqueue
FinISR			;Unmask other interrupts
				CPSIE I
				POP {R0-R3, PC}
				ENDP
;-------------------------------------------------
Init_UART0_IRQ	PROC	{R0-R14}
				PUSH 	{R0, R1, R2, LR}
				LDR 	R1,=RxQRec
				LDR 	R0,=RxQ
				MOVS 	R2,#Q_BUF_SZ
				BL 		InitQueue
				LDR 	R1, =TxQRec
				LDR 	R0, =TxQ
				MOVS 	R2, #Q_BUF_SZ
				BL 		InitQueue
				LDR 	R0,=SIM_SOPT2
				LDR 	R1,=SIM_SOPT2_UART0SRC_MASK
				LDR 	R2,[R0,#0]
				BICS 	R2,R2,R1
				LDR 	R1,=SIM_SOPT2_UART0_MCGPLLCLK_DIV2
				ORRS 	R2,R2,R1
				STR 	R2,[R0,#0]
				LDR 	R0,=SIM_SOPT5
				LDR 	R1,= SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
				LDR 	R2,[R0,#0]
				BICS 	R2,R2,R1
				STR 	R2,[R0,#0]
				LDR 	R0,=SIM_SCGC4
				LDR 	R1,= SIM_SCGC4_UART0_MASK
				LDR 	R2,[R0,#0]
				ORRS 	R2,R2,R1
				STR 	R2,[R0,#0]
				LDR 	R0,=SIM_SCGC5
				LDR 	R1,=SIM_SCGC5_PORTA_MASK
				LDR 	R2,[R0,#0]
				ORRS 	R2,R2,R1
				STR 	R2,[R0,#0]
				LDR 	R0,=PORTA_PCR1
				LDR 	R1,=PORT_PCR_SET_PTA1_UART0_RX
				STR 	R1,[R0,#0]
				LDR 	R0,=PORTA_PCR2
				LDR 	R1,=PORT_PCR_SET_PTA2_UART0_TX
				STR	 	R1,[R0,#0]  
				LDR	 	R0,=UART0_BASE
				MOVS 	R1,#UART0_C2_T_R
				LDRB 	R2,[R0,#UART0_C2_OFFSET]
				BICS 	R2,R2,R1
				STRB 	R2,[R0,#UART0_C2_OFFSET]
				LDR 	R0,=UART0_IPR
				LDR 	R1,=NVIC_IPR_UART0_MASK
				LDR 	R2,=NVIC_IPR_UART0_PRI_3
				LDR 	R3,[R0,#0]
				BICS 	R3,R3,R1
				ORRS 	R3,R3,R2
				STR 	R3,[R0,#0]
				LDR 	R0,=NVIC_ICPR
				LDR		R1,=NVIC_ICPR_UART0_MASK
				STR 	R1,[R0,#0]
				LDR 	R0,=NVIC_ISER
				LDR 	R1,=NVIC_ISER_UART0_MASK
				STR 	R1,[R0,#0]				 
				LDR 	R0,=UART0_BASE
				MOVS 	R1,#UART0_BDH_9600
				STRB 	R1,[R0,#UART0_BDH_OFFSET]
				MOVS	R1,#UART0_BDL_9600
				STRB 	R1,[R0,#UART0_BDL_OFFSET]
				MOVS 	R1,#UART0_C1_8N1
				STRB 	R1,[R0,#UART0_C1_OFFSET]
				MOVS 	R1,#UART0_C3_NO_TXINV
				STRB 	R1,[R0,#UART0_C3_OFFSET]
				MOVS 	R1,#UART0_C4_NO_MATCH_OSR_16
				STRB 	R1,[R0,#UART0_C4_OFFSET]
				MOVS 	R1,#UART0_C5_NO_DMA_SSR_SYNC
				STRB 	R1,[R0,#UART0_C5_OFFSET]
				MOVS 	R1,#UART0_S1_CLEAR_FLAGS
				STRB 	R1,[R0,#UART0_S1_OFFSET]
				MOVS 	R1,#UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
				STRB 	R1,[R0,#UART0_S2_OFFSET] 
				MOVS 	R1,#UART0_C2_T_RI
				STRB 	R1,[R0,#UART0_C2_OFFSET] 
				POP 	{R0-R2,PC}
				ENDP
;--------------------------------------------------------
PutStringSB		PROC	{R0-R13}
				PUSH    {LR,R0-R5} 
				MOVS	R3,#0			;Characters =0
				MOVS    R2,R0         	;Sets R2 to address
				MOVS	R5,R0		  	;Sets R5 to address
				SUBS	R1,R1,#1		;Max characters 78
;------------------------------------------------------------------------------
Loop2          	CMP		R3,R1			;Compares R3, to max characters 
				BGE		Break2
				LDRB   	R0,[R5,#0]      ;Loads R5 at  #0 into R0
				CMP     R0,#NULL        ;Compares R0 ane 0
				BEQ     Break2          ;Break if they are equal
				BL      PutChar         ;Putchar back
				ADDS	R5,R5,#1		;R5 incremented by 1
				SUBS	R3,R5,R2		;Characters+=1
				B       Loop2           ;Restart loop
;-----------------------------------       
Break2          POP     {PC,R0-R5}
				BX		LR
				ENDP
;-----------------------------------------------------------------------------
NewLine			PROC	{R0-R13}	
				PUSH	{R0,LR}
				MOVS	R0,#CR		;New line ascii
				BL		PutChar
				MOVS	R0,#LF		;Move cursor ascii
				BL		PutChar
				POP		{R0,PC}
				BX		LR
				ENDP
;-------------------------------------------------------------------------------
PutNumU			PROC	{R0-R13}
				PUSH	{LR,R0-R7}		;push the register list and registers R0-R7 onto stack
				MOVS	R2,#0			;Sets counter at 0
Loop3			CMP		R0,#10			;See if the value of R0 is a letter
				BLT		NumPrint		;If it is not go to NumPrint
				MOVS	R1,R0			;R1 = R0
				MOVS	R0,#10			;R0 = 10
				BL		DIVU			;DIVU R1 equals 
				PUSH	{R0}			;Process prints remainder up to putchar
				LDR		R0,=StringR		;R0 is reversed string
				STRB	R1,[R0,R2]		;R1 stored in reverse string for number
				POP		{R0}			;Pop and print R0
				ADDS	R2,R2,#1		;Add 1 to counter
NumPrint		ADDS	R0,R0,#'0'		;Conver to ascii
				BL		PutChar
				SUBS	R2,R2,#1		;Because number printed stored value is useless
Print_Char		LDR		R0,=StringR		;Retrieve stored values in reverse string
				CMP		R2,#0
				BLT		stop
				LDRB	R0,[R0,R2]
				ADDS	R0,R0,#'0'
				BL		PutChar
				SUBS	R2,R2,#1
stop			POP		{PC,R0-R7}		;restore program counter and the registers used
				BX		LR
				ENDP					;end subroutine
;------------------------------------------------------------
Dequeue			PROC	{R0-R13}
				PUSH	{R1-R4}
				LDRB	R4,[R1,#NUM]			;Load number of items in queue and compare to 0
				CMP		R4,#0					; to see if the queue is empty
				BLE		Empty
				LDR		R0,[R1,#OUT]			;Load R0 with the out pointer actual value
				LDRB	R0,[R0,#0]				
				LDR		R3,[R1,#OUT]			;Load R3 with the out pointer and increment to the next item in the Q
				SUBS	R4,R4,#1				;Decrement the number of items in the q by 1
				ADDS	R3,R3,#1
				STR		R3,[R1,#OUT]
				STRB	R4,[R1,#NUM]
				LDR		R2,[R1,#PAST]			;Compare out pointer to last item in the Q to determine if the out pointer 
				CMP		R3,R2					;needs to be moved to the first item in the circular q
				BGE		DeqSTR
				B		DeqSuc
;-------------------------------------------------------
DeqSTR			LDR		R3,[R1,#START]			;the out pointer is set to the first address in the q
				STR		R3,[R1,#OUT]
				B		DeqSuc
;-------------------------------------------------------
Empty			MRS		R2,APSR					;set the C flag
				MOVS	R3,#0x20
				LSLS	R3,R3,#SHIFT
				ORRS	R4,R4,R3
				MSR		APSR,R4
				B		DeqDone
;--------------------------------------------------------
DeqSuc			MRS		R4,APSR					;clear the C flag
				MOVS	R3,#0x20
				LSLS	R3,R3,#SHIFT
				BICS	R4,R4,R3
				MSR		APSR,R4
;--------------------------------------------------------
DeqDone			POP		{R1-R4}					;finish subroutine
				BX		LR
				ENDP
;------------------------------------------------------------
Enqueue			PROC	{R0-R13}
				PUSH	{R2-R4}
				LDRB	R3,[R1,#NUM]			;determine if the q is full
				LDRB	R4,[R1,#SIZE]
				CMP		R3,R4
				BGE		Full
				LDR		R2,[R1,#IN]				;load the enqueue item into the in pointer increment by 1 and then store
				STRB	R0,[R2,#0]
				ADDS	R2,R2,#1
				ADDS	R3,R3,#1				;increment the number of items in the q by 1
				STRB	R3,[R1,#NUM]
				STRB	R2,[R1,#IN]
				LDR		R3,[R1,#PAST]			;determine if the in pointer is outside of the q and needs to wrap around to the first item
				LDR		R4,[R1,#IN]
				CMP		R4,R3
				BGE		WRAP
				B		Worked
;---------------------------------------------------
WRAP			LDR		R3,[R1,#START]			;set the in pointer as the first memory address in the q.
				STR		R3,[R1,#IN]
				B		Worked
;---------------------------------------------------
Full			MRS		R3,APSR					;set the C flag
				MOVS	R2,#0x20
				LSLS	R2,R2,#SHIFT
				ORRS	R3,R3,R2
				MSR		APSR,R3
				B		Break
;---------------------------------------------------
Worked			MRS		R3,APSR					;clear the C flag
				MOVS	R2,#0x20
				LSLS	R3,R3,#SHIFT
				BICS	R3,R3,R2
				MSR		APSR,R2
;----------------------------------------------------
Break			POP		{R2-R4}					;end subroutine
				BX		LR
				ENDP
;------------------------------------------------------------
DIVU			PUSH    {R2} 		;Store R2 value
				MOVS    R2,#0 		;Set R3 equal to 0
				CMP     R0,R2 	    ;Compare R0 and R2
				BEQ     TRIGC   	;If R0 is 0 go to set carry
;--------------------------------
WHILE       	CMP     R1,R0      ;Compare R1 and R0
				BLO     BREAK      ;If R1 is lesss than R0, break
				ADDS    R2,R2,#1   ;R2+=1
				SUBS    R1,R1,R0   ;R1 = R1-R0, R1 is set to remainder
				B       WHILE	   ;Restart loop
;--------------------------------			
BREAK   	    MOVS    R0,R2      ;Put R2 value in R0, Quotient
				PUSH    {R0,R1}    ;Store R0 and R1
				MRS     R0,APSR    ;Clear C flag
				MOVS    R1,#0x20
				LSLS	R1,R1,#24
				BICS    R0,R0,R1   
				MSR     APSR,R0
				POP     {R0,R1}    ; Revert R1 and R0
				POP		{R2}	   ;Changes R2 back to original state
STOPDIVU    	BX      LR		   ;Leave subroutine and link registers
;-------------------------------
TRIGC		    POP		{R2}	   ;Changes R2 back to original value.
				PUSH    {R0,R1}    ;Store R0 and R1
				MRS     R0,APSR    ;Trigger C flag
				MOVS    R1,#0x20
				LSLS	R1,R1,#24
				ORRS    R0,R0,R1   
				MSR     APSR,R0    
				POP     {R0,R1}    ;Revert R0 and R1
				B       STOPDIVU   ;Go to StopDiv/End subroutine  
;-------------------------------------------------
Init_PIT_IRQ	PROC	{R0-R13}
				CPSID 	I
				PUSH 	{R0-R2,LR}
				LDR 	R0,=SIM_SCGC6
				LDR 	R1,=SIM_SCGC6_PIT_MASK
				LDR 	R2,[R0,#0]
				;Set only the PIT bit on SIM_SCGC6
				ORRS 	R2,R2,R1
				;Store set bit back on to the register
				STR 	R2,[R0,#0]
				;Disable timer 0 TODO: Is this appropriate?
				LDR 	R0,=PIT_CH0_BASE
				LDR 	R1,=PIT_TCTRL_TEN_MASK
				LDR 	R2,[R0,#PIT_TCTRL_OFFSET]
				BICS 	R2,R2,R1
				STR 	R2,[R0,#PIT_TCTRL_OFFSET]
				;Enable the PIT timer module
				LDR 	R0,=PIT_BASE
				;Enable the FRZ to stop timer in debug mode
				LDR 	R1,=PIT_MCR_EN_FRZ
				STR 	R1,[R0,#PIT_MCR_OFFSET]
				;Request interrupts every 0.01 seconds
				LDR 	R0,=PIT_CH0_BASE
				LDR 	R1,=PIT_LDVAL_10ms 
				STR 	R1,[R0,#PIT_LDVAL_OFFSET]
				;Enable PIT timer channel 0 for interrupts
				LDR		R0,=PIT_CH0_BASE
				;Interrupt enabled mask to write to the register
				MOVS 	R1,#PIT_TCTRL_CH_IE
				STR 	R1,[R0,#PIT_TCTRL_OFFSET]
				;Initalize PIT Interrupts in the NVIC
				;Make sure they are set to the highest priority (0)
				;Unmask PIT Interrupts
				LDR 	R0,=NVIC_ISER
				LDR 	R1,=PIT_IRQ_MASK
				STR 	R1,[R0,#0]
				;Set PIT Interrupt Priority
				LDR 	R0,=PIT_IPR
				LDR 	R1,=(PIT_IRQ_PRIORITY<<PIT_PRI_POS)
				STR 	R1,[R0,#0]
				CPSIE I
				POP {R0-R2,PC}
				BX		LR
				ENDP
;-------------------------------------------------
;>>>>>   end subroutine code <<<<<
            ALIGN
;**********************************************************************
;Constants
            AREA    MyConst,DATA,READONLY
;>>>>> begin constants here <<<<<
;>>>>>   end constants here <<<<<
;**********************************************************************
;Variables
            AREA    MyData,DATA,READWRITE
;>>>>> begin variables here <<<<<
Q				SPACE		Q_BUF_SZ
QRec			SPACE		Q_REC_SZ
				ALIGN
TxQ				SPACE		Q_BUF_SZ
TxQRec			SPACE		Q_REC_SZ
				ALIGN	
RxQ				SPACE		Q_BUF_SZ
RxQRec			SPACE		Q_REC_SZ
				ALIGN
StringR			SPACE		4
				ALIGN
RunStopWatch	SPACE		1 
                ALIGN
Count			SPACE		4 
;>>>>>   end variables here <<<<<
            END